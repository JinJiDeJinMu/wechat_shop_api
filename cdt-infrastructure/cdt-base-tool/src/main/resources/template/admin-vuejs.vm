$(function () {
const defaultListQuery = {
limit: 10,
page: 1,
sidx: '',
order: 'asc',
name: '',
goodSn: ''
};
let vm = new Vue({
el: '#app',
data: {
showList: true,
title: null,
const defaultListQuery = {
limit: 10,
page: 1,
sidx: '',
order: 'asc',
name: '',
goodSn: ''
};
${table.entityPath}: {},
ruleValidate: {
name: [
{required: true, message: '名称不能为空', trigger: 'blur'}
]
},
},
created: function () {
this.getList();
},
filters: {
//时间戳格式化
formatDate(date) {
let fmt = 'yyyy-MM-dd hh:mm:ss';
if (/(y+)/.test(fmt)) {
fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));
}
let o = {
'M+': date.getMonth() + 1,
'd+': date.getDate(),
'h+': date.getHours(),
'm+': date.getMinutes(),
's+': date.getSeconds()
};
for (let k in o) {
if (new RegExp(`(${k})`).test(fmt)) {
let str = o[k] + '';
fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? str : padLeftZero(str));
}
}
return fmt;
},
formatPayType(value) {
if (value === 1) {
return '支付宝';
} else if (value === 2) {
return '微信';
} else {
return '未支付';
}
},
formatSourceType(value) {
if (value === 1) {
return 'APP订单';
} else {
return 'PC订单';
}
},
formatGoodsType(value) {
if (value === 1) {
return '普通商品';
} else if (value === 2) {
return '秒杀';
} else if (value === 3) {
return '团购';
} else if (value === 4) {
return '砍价';
} else if (value === 5) {
return '快递代取';
} else if (value === 6) {
return '核销商品';
} else {
return '普通';
}
},
},
methods: {
dateFormat: function (time) {
var date = new Date(time.addTime);
var year = date.getFullYear();
var month = date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1;
var day = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();
var hours = date.getHours() < 10 ? "0" + date.getHours() : date.getHours();
var minutes = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes();
var seconds = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds();
// 拼接
return year + "-" + month + "-" + day + " " + hours + ":" + minutes + ":" + seconds;
},
getList: function () {
this.listLoading = false;
Ajax.request({
url: "../${table.entityPath}/list?limit=" + this.listQuery.limit + "&page=" + this.listQuery.page + "&sidx=" + this.listQuery
.sidx + "&name=" + this.listQuery.name + "&order=" + this.listQuery.order,
async: true,
successCallback: function (r) {
console.log(r)
vm.listLoading = false;
vm.list = r.page.list;
vm.total = r.page.totalCount;
}
});
},
getSelectRowIds() {
let ids = [];
for (let i = 0; i < this.multipleSelection.length; i++) {
ids.push(this.multipleSelection[i].id);
}
return ids;
},
handleBatchOperate() {
if (this.operateType == null) {
this.$message({
message: '请选择操作类型',
type: 'warning',
duration: 1000
});
return;
}
if (!this.checkSelected()) {
return;
}
this.$confirm('是否要进行该批量操作?', '提示', {
confirmButtonText: '确定',
cancelButtonText: '取消',
type: 'warning'
}).then(() => {
let ids = this.getSelectRowIds();
switch (this.operateType) {
case this.operates[0].value:
this.updatePublishStatus(1, ids);
break;
case this.operates[1].value:
this.updatePublishStatus(0, ids);
break;
case this.operates[2].value:
this.updateNewStatus(1, ids);
break;
case this.operates[3].value:
this.updateNewStatus(0, ids);
break;
case this.operates[4].value:
this.updateDeleteStatus(1, ids);
break;
default:
break;
}
this.getList();
});
},
handleSizeChange(val) {
this.listQuery.page = 1;
this.listQuery.limit = val;
this.getList();
},
handleCurrentChange(val) {
this.listQuery.page = val;
this.getList();
},
handleSelectionChange(val) {
this.multipleSelection = val;
},
handleDelete(index, row) {
this.$confirm('是否要进行删除操作?', '提示', {
confirmButtonText: '确定',
cancelButtonText: '取消',
type: 'warning'
}).then(() => {
let ids = [];
ids.push(row.id);
this.del(ids);
});
},
handlePublishStatusChange(index, row) {
let ids = [];
ids.push(row.id);
console.log(JSON.stringify(row))
this.updatePublishStatus(row.isOnSale, ids);
},
handleNewStatusChange(index, row) {
let ids = [];
ids.push(row.id);
this.updateNewStatus(row.newStatus, ids);
},
handleSelectionChange: function (val) {
vm.multipleSelection = val;
},
updatePublishStatus: function (status, ids) {
console.log(status);
console.log(ids);
if (status == 1) {
this.$confirm('确定要上架选中的商品?', '提示', {
confirmButtonText: '确定',
cancelButtonText: '取消',
type: 'warning'
}).then(() => {
ids.forEach(this.enSale)
});
} else {
this.$confirm('确定要下架选中的商品?', '提示', {
confirmButtonText: '确定',
cancelButtonText: '取消',
type: 'warning'
}).then(() => {
ids.forEach(this.unSale)
});
}
},
updateNewStatus: function (status, ids) {
console.log(status)
console.log(ids)
if (status == 1) {
ids.forEach(this.enSale)
} else {
ids.forEach(this.unSale)
}
},
handleUpdateProduct(index, row) {
this.updateFun(row.id);
},
updateDeleteStatus(deleteStatus, ids) {
let params = new URLSearchParams();
params.append('ids', ids);
params.append('deleteStatus', deleteStatus);
this.del(ids);
},
query: function () {
vm.reload();
},
add: function () {
vm.showList = false;
vm.title = "新增";
vm.${table.entityPath} = {};
},
update: function (event) {
let $pk.attrname = getSelectedRow("#jqGrid");
if ($pk.attrname == null) {
return;
}
vm.showList = false;
vm.title = "修改";

vm.getInfo(${pk.attrname});
},
saveOrUpdate: function (event) {
let url = vm.${table.entityPath}.id == null ? "../${table.entityPath}/save" : "../${table.entityPath}/update";
Ajax.request({
url: url,
params: JSON.stringify(vm.${table.entityPath}),
type: "POST",
contentType: "application/json",
successCallback: function (r) {
alert('操作成功', function (index) {
vm.reload();
});
}
});
},
del: function (event) {
let ids = getSelectedRows("#jqGrid");
if (ids == null){
return;
}

confirm('确定要删除选中的记录？', function () {
Ajax.request({
url: "../${table.entityPath}/delete",
params: JSON.stringify(ids),
type: "POST",
contentType: "application/json",
successCallback: function () {
alert('操作成功', function (index) {
vm.reload();
});
}
});
});
},
getInfo: function(id){
Ajax.request({
url: "../${table.entityPath}/info/"+id,
async: true,
successCallback: function (r) {
vm.${table.entityPath} = r.${table.entityPath};
}
});
},
reload: function (event) {
vm.showList = true;
// let page = $("#jqGrid").jqGrid('getGridParam', 'page');
// $("#jqGrid").jqGrid('setGridParam', {
// postData: {'name': vm.q.name},
// page: page
// }).trigger("reloadGrid");
this.getList();
vm.handleReset('formValidate');
},
reloadSearch: function() {
vm.q = {
name: ''
};
vm.reload();
},
handleSubmit: function (name) {
handleSubmitValidate(this, name, function () {
vm.saveOrUpdate()
});
},
handleReset: function (name) {
handleResetForm(this, name);
}
}
});